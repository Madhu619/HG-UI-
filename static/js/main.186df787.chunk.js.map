{"version":3,"sources":["component/staticComponent/loading.gif","component/staticComponent/NoData.png","component/staticComponent/Loader.jsx","component/yearsData.js","component/staticComponent/filters/YearFilterValues.jsx","component/staticComponent/filters/SuccessLaunch.jsx","component/staticComponent/filters/SuccessLanding.jsx","component/navbar/Navbar.jsx","component/DisplayCards.jsx","component/CreateDataView.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loader","style","imageWrapper","position","maxWidth","maxHeight","top","left","overflow","imageWidth","marginTop","marginLeft","src","LoaderGif","className","alt","Years","styles","year_filter","margin","minWidth","backgroundColor","color","YearFilterValues","yearChange","selectedYear","map","year","class","key","onClick","SuccessFilter","onLaunchChange","launchFlag","SuccessLanding","onLandChange","landFlag","CreateDataView","background","cards","height","img_filter","DisplayCards","flight","links","mission_patch","mission_name","flight_number","mission_id","length","toString","launch_year","launch_success","rocket","first_stage","cores","land_success","data","Row","Col","md","xl","sm","App","props","onDataReceived","setState","isLoaded","onYearChange","previousLaunchValue","URL","state","url","searchParams","get","set","href","$","result","this","bind","flag","Container","fluid","Navbar","width","NoData","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.186df787.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.a7123a12.gif\";","module.exports = __webpack_public_path__ + \"static/media/NoData.0b823006.png\";","import React from 'react';\nimport LoaderGif from './loading.gif';\n\nexport default function Loader () {\n    const style = {\n        imageWrapper: {\n            position:'absolute',\n            maxWidth:'45%',\n            maxHeight:'45%',\n            top:'50%',\n            left:'50%',\n            overflow:'visible',\n        },\n        imageWidth : {\n            position:'relative',\n            maxWidth:'100%',\n            maxHeight:'100%',\n            marginTop:'-50%',\n            marginLeft:'-50%',\n        }\n      }\n    return (\n        <div style={style.imageWrapper}> \n            <img style={style.imageWidth} src={LoaderGif} className=\"loading\" alt=\"Loading...\" />\n        </div>\n    )\n}\n","const Years = [2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020];\nexport default Years;","import React from 'react';\nimport Years from '../../yearsData';\n\nconst styles = {\n    year_filter : {\n        margin: '5px',\n        minWidth: '70px',\n        backgroundColor: '#c5e09b',\n        color: '#444',\n    }\n}\n\nconst YearFilterValues = ({yearChange, selectedYear}) => {\n\n    return (\n        <>\n            <div className=\"text-center divider mb-3 border-bottom\">Launch Year</div>\n            <div className='row'>\n                {Years.map(year => <div class=\"col-sm-6 col-md-6 col-6\"><button class style={styles.year_filter} className={`btn btn-success year-filter  ${selectedYear === year ? 'active' : ''}`}  key={year} onClick={() => yearChange(year)}> {year} </button></div>)} \n            </div>\n        </>\n    );\n\n}\n\nexport default YearFilterValues;\n//${selectedYear === year ? styles.activeTab : ''}","import React from 'react';\n\nconst styles = {\n    year_filter : {\n        margin: '5px',\n        minWidth: '70px',\n        backgroundColor: '#c5e09b',\n        color: '#444',\n    }\n}\n\nexport default function SuccessFilter ({onLaunchChange, launchFlag}) {\n    return (\n        <div>\n            <div className=\"text-center divider mb-3 border-bottom mt-3\">Successful Launch</div>\n            <button style={styles.year_filter} className={`btn btn-success year-filter ${launchFlag === true ? 'active' : ''}`} onClick={() => onLaunchChange(true)}> True </button>\n            <button style={styles.year_filter} className={`btn btn-success year-filter ${launchFlag === false ? 'active' : ''}`} onClick={() => onLaunchChange(false)}> False </button>\n        </div>\n    );\n}\n","import React from 'react';\n\nconst styles = {\n    year_filter : {\n        margin: '5px',\n        minWidth: '70px',\n        backgroundColor: '#c5e09b',\n        color: '#444',\n    }\n}\n\nexport default function SuccessLanding ({onLandChange, landFlag}) {\n  \n    return (\n        <div>\n            <div className=\"text-center divider mb-3 border-bottom mt-3\">Successful Landing</div>\n            <button style={styles.year_filter} className={`btn btn-success year-filter ${landFlag === true ? 'active' : ''}`}  onClick={() => onLandChange(true)}> True </button>\n            <button style={styles.year_filter} className={`btn btn-success year-filter ${landFlag === false ? 'active' : ''}`}  onClick={() => onLandChange(false)}> False </button>\n        </div>\n    );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport YearFilterValues from '../staticComponent/filters/YearFilterValues';\nimport SuccessLaunch from '../staticComponent/filters/SuccessLaunch';\nimport SuccessLanding from '../staticComponent/filters/SuccessLanding';\n\nconst CreateDataView = ({ yearChange , onLaunchChange, onLandChange, year, launchFlag, landFlag}) => {\n    const styles = {\n        nav_wrapper: {\n            background:' #fff',\n            margin: '0 15px',\n        }\n    }\n\treturn (\n        <div style={styles.nav_wrapper} className='p-2'>\n            <h1>Filters </h1>\n                <YearFilterValues yearChange= {yearChange} selectedYear={year}/>\n                <SuccessLaunch onLaunchChange= {onLaunchChange} launchFlag= {launchFlag}/>\n                <SuccessLanding onLandChange= {onLandChange} landFlag={landFlag}/>\n        </div>\n\t);\n};\n\nexport default CreateDataView;","import React from 'react';\n\nconst styles = {\n    cards: {\n        height: '500px',\n    },\n    img_filter : {\n        maxWidth: '150px',\n        margin: '10px auto',\n    }\n}\n\nconst DisplayCards = ({key, flight}) => {\n    return (\n        <div style={styles.cards} className=\"card mb-2\">\n            <img style={styles.img_filter} src={flight.links.mission_patch} className=\"card-img-top\" alt=\"Mission Patch\" />\n            <div className=\"card-body\">\n                <h5 className=\"card-title\"> {flight.mission_name} #{flight.flight_number} </h5>\n                <div className=\"card-content\">\n                    { flight.mission_id.length > 0 && <p><strong>Mission Ids : </strong> {flight.mission_id.toString()}</p> }\n                    <p><strong>Launch Year : </strong> {flight.launch_year}</p>\n                    <p><strong>Successful Launch : </strong> {flight.launch_success ? 'True' : 'False'} </p>\n                    <p><strong>Successful Landing : </strong> {flight.rocket.first_stage.cores[0].land_success ? 'True' : 'False'} </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default DisplayCards;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport DisplayCards from './DisplayCards';\n\nconst CreateDataView = ({ data }) => {\n\treturn (\n\t\t<>\n\t\t\t<Row>\n\t\t\t\t{data.map(flight => <Col md={6} xl={3} sm={12} className=\"col-xs-12\">  <DisplayCards key={flight.flight_number} flight={flight} /> </Col>)} \n\t\t\t</Row>\n\t\t</>\n\t);\n};\n\nexport default CreateDataView;","import * as React from 'react';\nimport $ from 'jquery'; \nimport { Container, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Loader from './component/staticComponent/Loader';\nimport NoData from './component/staticComponent/NoData.png';\nimport Navbar from './component/navbar/Navbar';\nimport CreateDataView from './component/CreateDataView';\n\nclass App extends React.Component {\n   constructor(props) {\n      super(props);\n      \n      this.state = {\n         data: [],\n         isLoaded : false,\n         url: 'https://api.spaceXdata.com/v3/launches?limit=100',\n         year:2006,\n         launchFlag: '',\n         landFlag: '',\n      }\n   };\n  \n  onDataReceived = (data) => {\n    this.setState({\n      data: data,\n      isLoaded: true,\n    });\n  }\n\n  onYearChange = (year) => {\n    let previousLaunchValue = new URL(this.state.url);\n    if (previousLaunchValue.searchParams.get('launch_year') !== null) {\n      previousLaunchValue.searchParams.set('launch_year', year);\n      previousLaunchValue = previousLaunchValue.href;\n    } else {\n      previousLaunchValue = this.state.url + '&launch_year='+year;\n    }\n    this.setState({ isLoaded: false, url: previousLaunchValue, year: year});\n\n    $.get(previousLaunchValue, function(result) {\n      this.onDataReceived(result);\n    }.bind(this));\n  }\n\n  onLaunchChange = (flag) => {\n    let previousLaunchValue = new URL(this.state.url);\n\n    if (previousLaunchValue.searchParams.get('launch_success') !== null) {\n      previousLaunchValue.searchParams.set('launch_success', flag);\n      previousLaunchValue = previousLaunchValue.href;\n    } else {\n      previousLaunchValue = this.state.url+'&launch_success='+flag;\n    }\n\n    this.setState({ isLoaded: false, url: previousLaunchValue, launchFlag:flag });\n\n    $.get(previousLaunchValue, function(result) {\n      this.onDataReceived(result);\n    }.bind(this));\n  }\n\n  onLandChange = (flag) => {\n    let previousLaunchValue = new URL(this.state.url);\n\n    if (previousLaunchValue.searchParams.get('land_success') !== null) {\n      previousLaunchValue.searchParams.set('land_success', flag);\n      previousLaunchValue = previousLaunchValue.href;\n    } else {\n      previousLaunchValue = this.state.url+'&land_success='+flag;\n    }\n\n    this.setState({ isLoaded: false, url: previousLaunchValue, landFlag:flag});\n\n    $.get(previousLaunchValue, function(result) {\n      this.onDataReceived(result);\n    }.bind(this));\n  }\n\n\n  componentDidMount() {\n    $.get(this.state.url, function(result) {\n      this.onDataReceived(result);\n    }.bind(this));\n  }\n\n  render() {\n    if(this.state.isLoaded) {\n      return (\n        <>\n          <Container fluid>\n            <Row>\n              <h1 className='m-4'> SpacEx Launch Programs</h1>\n            </Row>\n            <Row className='text-center'>\n              <Col md={4} sm={6}  className='mb-4 col-xs-12' ><Navbar year= {this.state.year} yearChange={this.onYearChange} onLaunchChange = {this.onLaunchChange} onLandChange = {this.onLandChange} launchFlag={this.state.launchFlag} landFlag={this.state.landFlag} /> </Col>\n\n              {this.state.data.length > 0 && <Col md={8} sm={6}> <CreateDataView data = {this.state.data}/> </Col>}\n              {this.state.data.length === 0 && <Col md={8} sm={6}>  <img width='100%' src={`${NoData}`} alt='No Data'></img> </Col> }\n            </Row>\n          </Container>\n        </>\n      )\n    } else {\n      return ( \n        <Loader />\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}